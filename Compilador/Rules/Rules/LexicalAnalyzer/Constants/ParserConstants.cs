namespace Rules.LexicalAnalyzer.Constants
{
    public class ParserConstants
    {
        public const int START_SYMBOL = 49;

        public const int FIRST_NON_TERMINAL = 49;
        public const int FIRST_SEMANTIC_ACTION = 91;

        public readonly int[][] PARSER_TABLE = 
        {
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 23, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, 23, -1, -1, -1, 23, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, 23, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1,  6, -1, -1, -1,  6, -1, -1, -1, -1, -1,  6, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1,  9,  9, -1, -1,  9, -1, -1, -1,  9, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, -1, -1, 15, -1, -1, -1, 14, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, 10, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, -1, -1, 13, -1, -1, -1, 13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 24, -1, -1, -1, -1, -1, -1, 25, 25, -1, -1, 25, -1, -1, -1, 25, -1, -1, -1, -1, 24, 25, -1, -1, -1, -1, 24, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24 },
            new int[] { -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27 },
            new int[] { -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 26, 26, -1, -1, 26, -1, -1, -1, 26, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, 39, 40, -1 },
            new int[] { -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, 51, -1, -1, -1, -1, 51, 51, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 43, 43, 43, 43, 43, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, 43, -1, -1, -1, -1, 43, 43, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 21, 20, 20, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1 },
            new int[] { -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, 56, -1, -1, -1, -1, 55, 55, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 68, 68, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 68, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, 64, 65, 66, 67, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 72, 72, 72, 72, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 76, 77, 78, 80, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, 83, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, 69, 70, -1, -1, -1, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, 75, 75, 73, 74, -1, 75, 75, 75, 75, 75, 75, 75, 75, 75, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, 84, 84, 84, 84, 85, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 86, 86, 86, 86, 86, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, 86, -1, -1, -1, -1, 86, 86, -1, -1, 86, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 60, 60, 60, 60, 60, 60, 61, 61, -1, -1, -1, -1, -1, -1 }
        };

        public readonly int[][] PRODUCTIONS =  
        {
            new int[] { 106, 18, 50, 51, 107, 8, 52, 11, 108 },
            new int[] { 0 },
            new int[] { 53, 50 },
            new int[] { 0 },
            new int[] { 60, 51 },
            new int[] { 14, 19, 54, 2, 33, 55, 34 },
            new int[] { 56 },
            new int[] { 25 },
            new int[] { 0 },
            new int[] { 57 },
            new int[] { 58, 76 },
            new int[] { 0 },
            new int[] { 43, 57 },
            new int[] { 56, 44, 59 },
            new int[] { 17 },
            new int[] { 13 },
            new int[] { 9 },
            new int[] { 10 },
            new int[] { 23 },
            new int[] { 2, 75 },
            new int[] { 0 },
            new int[] { 41, 59 },
            new int[] { 19, 2, 8, 52, 11 },
            new int[] { 61, 62 },
            new int[] { 0 },
            new int[] { 69, 61 },
            new int[] { 56, 44, 59, 42 },
            new int[] { 63, 42, 77 },
            new int[] { 0 },
            new int[] { 62 },
            new int[] { 65 },
            new int[] { 66 },
            new int[] { 67 },
            new int[] { 68 },
            new int[] { 33, 71, 34, 64 },
            new int[] { 16, 62, 73, 11 },
            new int[] { 74, 62, 11 },
            new int[] { 2, 70, 71 },
            new int[] { 45 },
            new int[] { 46 },
            new int[] { 47 },
            new int[] { 22, 33, 59, 34 },
            new int[] { 28, 33, 72, 34 },
            new int[] { 71, 105, 78 },
            new int[] { 0 },
            new int[] { 41, 72 },
            new int[] { 0 },
            new int[] { 15, 62 },
            new int[] { 27 },
            new int[] { 26 },
            new int[] { 48, 71 },
            new int[] { 79, 85 },
            new int[] { 0 },
            new int[] { 7, 79, 109, 85 },
            new int[] { 21, 79, 110, 85 },
            new int[] { 80 },
            new int[] { 24, 102 },
            new int[] { 12, 103 },
            new int[] { 20, 79, 104 },
            new int[] { 81, 90 },
            new int[] { 82, 81 },
            new int[] { 0 },
            new int[] { 35 },
            new int[] { 36 },
            new int[] { 37 },
            new int[] { 38 },
            new int[] { 39 },
            new int[] { 40 },
            new int[] { 83, 86 },
            new int[] { 29, 83, 92, 86 },
            new int[] { 30, 83, 93, 86 },
            new int[] { 0 },
            new int[] { 84, 87 },
            new int[] { 31, 84, 94, 87 },
            new int[] { 32, 84, 95, 87 },
            new int[] { 0 },
            new int[] { 2, 88 },
            new int[] { 3, 96 },
            new int[] { 4, 97 },
            new int[] { 6, 111 },
            new int[] { 5, 112 },
            new int[] { 33, 71, 34 },
            new int[] { 29, 84, 98 },
            new int[] { 30, 84, 99 },
            new int[] { 0 },
            new int[] { 33, 89, 34 },
            new int[] { 72 },
            new int[] { 0 }
        };

        public readonly string[] PARSER_ERROR =
        {
            string.Empty,
            "fim de arquivo", // fim de programa
            "identificador",
            "constante int", // constanteInteira
            "constante float", //constanteReal
            "constante string", //constanteString
            "constante caractere", //constanteCaractere
            "and",
            "begin",
            "bool",
            "char",
            "end",
            "false",
            "float",
            "forward",
            "ifFalseDo",
            "ifTrueDo",
            "int",
            "main",
            "module",
            "not",
            "or",
            "read",
            "string",
            "true",
            "void",
            "whileFalseDo",
            "whileTrueDo",
            "write",
            "+",
            "-",
            "*",
            "/",
            "(",
            ")",
            "==",
            "!=",
            "<",
            "<=",
            ">",
            ">=",
            ",",
            ".",
            ";",
            ":",
            "=",
            "+=",
            "-=",
            "^",
            "main", //"<program> inválido",
            "begin module forward", //"<listaDeclaracoes> inválido",
            "module begin", //"<listaModulos> inválido",
            "identificador tipo write ( ^", //"<corpo> inválido",
            "forward", //"<declaracao> inválido",
            "tipo", //"<tipoModulo> inválido",
            "tipo )", //"<listaParametrosFormais> inválido",
            "tipo",//"<tipo> inválido",
            "tipo", //"<parametrosFormais> inválido",
            "tipo",//"<parametro> inválido",
            "identificador", //"<listaIdentificadores> inválido",
            "module", //"<modulo> inválido",
            "identificador tipo write ( ^", //"<declaracaoVariaveis> inválido",
            "identificador read write / ^",//"<listaComandos> inválido",
            "identificador read write ( ^",//"<comando> inválido",
            "ifTrueDo whileFalseDo whileTrueDo",//"<comando1> inválido",
            "identificador",//"<atribuicao> inválido",
            "read",//"<entradaDados> inválido",
            "write",//"<saidaDados> inválido",
            "^",//"<retornoModulo> inválido",
            "tipo",//"<variavel> inválido",
            "= += -=",//"<operadorAtribuicao> inválido",
            "expressão",//"<expressao> inválido",
            "expressão",//"<listaExpressoes> inválido",
            "end ifFalseDo",//"<selecaoOpcional> inválido",
            "whileTrueDo whileFalseDo",//"<tipoCondicao> inválido",
            ") , . ;",//"<listaIdentificadores1> inválido",
            ") ;",//"<parametrosFormais1> inválido",
            "identificador end ifFalseDo read write ( ^",//"<listaComandos1> inválido",
            ") ,",//"<listaExpressoes1> inválido",
            "expressão",//"<elemento> inválido",
            "expressão",//"<relacional> inválido",
            "expressão",//"<aritmática> inválido",
            "expressão",//"<operadorRelacional> inválido",
            "expressão",//"<termo> inválido",
            "expressão",//"<fator> inválido",
            "expressão.",//"<expressao1> inválido",
            "expressão",//"<aritmetica1> inválido",
            "expressão",//"<termo1> inválido",
            "expressão",//"<fator1> inválido",
            "expressão",//"<fator2> inválido",
            "expressão"//"<relacional1> inválido"
        };
    }
}
