namespace Rules.LexicalAnalyzer.Constants
{
    public class ParserConstants
    {
        public const int START_SYMBOL = 49;

        public const int FIRST_NON_TERMINAL = 49;
        public const int FIRST_SEMANTIC_ACTION = 91;

        public readonly int[][] PARSER_TABLE =
        {
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 23, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, 23, -1, -1, -1, 23, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, 23, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1,  6, -1, -1, -1,  6, -1, -1, -1, -1, -1,  6, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1,  9,  9, -1, -1,  9, -1, -1, -1,  9, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, -1, -1, 15, -1, -1, -1, 14, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, 10, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, -1, -1, 13, -1, -1, -1, 13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 24, -1, -1, -1, -1, -1, -1, 25, 25, -1, -1, 25, -1, -1, -1, 25, -1, -1, -1, -1, 24, 25, -1, -1, -1, -1, 24, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24 },
            new int[] { -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27 },
            new int[] { -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, 26, 26, -1, -1, 26, -1, -1, -1, 26, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, 39, 40, -1 },
            new int[] { -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, 51, -1, -1, -1, -1, 51, 51, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 43, 43, 43, 43, 43, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, 43, -1, -1, -1, -1, 43, 43, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 21, 20, 20, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1 },
            new int[] { -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, 56, -1, -1, -1, -1, 55, 55, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 68, 68, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 68, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, 64, 65, 66, 67, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 72, 72, 72, 72, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 76, 77, 78, 80, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, 83, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, 69, 70, -1, -1, -1, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, 75, 75, 73, 74, -1, 75, 75, 75, 75, 75, 75, 75, 75, 75, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, 84, 84, 84, 84, 85, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 86, 86, 86, 86, 86, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, 86, -1, -1, -1, -1, 86, 86, -1, -1, 86, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 60, 60, 60, 60, 60, 60, 61, 61, -1, -1, -1, -1, -1, -1 }
        };

        public readonly int[][] PRODUCTIONS =
        {
            new int[] { 18, 50, 51,  8, 52, 11 },
            new int[] {  0 },
            new int[] { 53, 50 },
            new int[] {  0 },
            new int[] { 60, 51 },
            new int[] { 14, 19, 54,  2, 33, 55, 34 },
            new int[] { 56 },
            new int[] { 25 },
            new int[] {  0 },
            new int[] { 57 },
            new int[] { 58, 76 },
            new int[] {  0 },
            new int[] { 43, 57 },
            new int[] { 56, 44, 59 },
            new int[] { 17 },
            new int[] { 13 },
            new int[] {  9 },
            new int[] { 10 },
            new int[] { 23 },
            new int[] {  2, 75 },
            new int[] {  0 },
            new int[] { 41, 59 },
            new int[] { 19,  2,  8, 52, 11 },
            new int[] { 61, 62 },
            new int[] {  0 },
            new int[] { 69, 61 },
            new int[] { 56, 44, 59, 42 },
            new int[] { 63, 42, 77 },
            new int[] {  0 },
            new int[] { 62 },
            new int[] { 65 },
            new int[] { 66 },
            new int[] { 67 },
            new int[] { 68 },
            new int[] { 33, 71, 34, 64 },
            new int[] { 16, 62, 73, 11 },
            new int[] { 74, 62, 11 },
            new int[] {  2, 70, 71 },
            new int[] { 45 },
            new int[] { 46 },
            new int[] { 47 },
            new int[] { 22, 33, 59, 34 },
            new int[] { 28, 33, 72, 34 },
            new int[] { 71, 78 },
            new int[] {  0 },
            new int[] { 41, 72 },
            new int[] {  0 },
            new int[] { 15, 62 },
            new int[] { 27 },
            new int[] { 26 },
            new int[] { 48, 71 },
            new int[] { 79, 85 },
            new int[] {  0 },
            new int[] {  7, 79, 85 },
            new int[] { 21, 79, 85 },
            new int[] { 80 },
            new int[] { 24 },
            new int[] { 12 },
            new int[] { 20, 79 },
            new int[] { 81, 90 },
            new int[] { 82, 81 },
            new int[] {  0 },
            new int[] { 35 },
            new int[] { 36 },
            new int[] { 37 },
            new int[] { 38 },
            new int[] { 39 },
            new int[] { 40 },
            new int[] { 83, 86 },
            new int[] { 29, 83, 86 },
            new int[] { 30, 83, 86 },
            new int[] {  0 },
            new int[] { 84, 87 },
            new int[] { 31, 84, 87 },
            new int[] { 32, 84, 87 },
            new int[] {  0 },
            new int[] {  2, 88 },
            new int[] {  3 },
            new int[] {  4 },
            new int[] {  6 },
            new int[] {  5 },
            new int[] { 33, 71, 34 },
            new int[] { 29, 84 },
            new int[] { 30, 84 },
            new int[] {  0 },
            new int[] { 33, 89, 34 },
            new int[] { 72 },
            new int[] {  0 }
        };

        public readonly string[] PARSER_ERROR =
        {
            string.Empty,
            "esperado fim de arquivo", //"esperado fim de programa"
            "esperado identificador",
            "esperado constante inteira", // constanteInteira
            "esperado constanteReal", //constanteReal
            "esperado constante string", //constanteString
            "esperado constanteCaractere", //constanteCaractere
            "esperado and",
            "esperado begin",
            "esperado bool",
            "esperado char",
            "esperado end",
            "esperado false",
            "esperado float",
            "esperado forward",
            "esperado ifFalseDo",
            "esperado ifTrueDo",
            "esperado int",
            "esperado main",
            "esperado module",
            "esperado not",
            "esperado or",
            "esperado read",
            "esperado string",
            "esperado true",
            "esperado void",
            "esperado whileFalseDo",
            "esperado whileTrueDo",
            "esperado write",
            "esperado \"+\"",
            "esperado \"-\"",
            "esperado \"*\"",
            "esperado \"/\"",
            "esperado \"(\"",
            "esperado \")\"",
            "esperado \"==\"",
            "esperado \"!=\"",
            "esperado \"<\"",
            "esperado \"<=\"",
            "esperado \">\"",
            "esperado \">=\"",
            "esperado \",\"",
            "esperado \".\"",
            "esperado \";\"",
            "esperado \":\"",
            "esperado \"=\"",
            "esperado \"+=\"",
            "esperado \"-=\"",
            "esperado \"^\"",
            "esperado main", //"<program> inválido",
            "esperado forward module", //"<listaDeclaracoes> inválido",
            "esperado module identificador begin", //"<listaModulos> inválido",
            "esperado identificador read write tipo ( ^", //"<corpo> inválido",
            "esperado forward module", //"<declaracao> inválido",
            "esperado tipo", //"<tipoModulo> inválido",
            "esperado tipo : identificador ; tipo : identificador ", //"<listaParametrosFormais> inválido",
            "esperado int  float  bool  char string",//"<tipo> inválido",
            "esperado parametro ; parametro ", //"<parametrosFormais> inválido",
            "esperado tipo : identificador",//"<parametro> inválido",
            "esperado identificador , identificador", //"<listaIdentificadores> inválido",
            "esperado module identificador begin", //"<modulo> inválido",
            "esperado variavel", //"<declaracaoVariaveis> inválido",
            "esperado comando .",//"<listaComandos> inválido",
            "esperado identificador read  ( write ^",//"<comando> inválido",
            "esperado ifTrueDo tipo condicao",//"<comando1> inválido",
            "esperado identificador",//"<atribuicao> inválido",
            "esperado read ( ",//"<entradaDados> inválido",
            "esperado write ( ",//"<saidaDados> inválido",
            "esperado ^ ",//"<retornoModulo> inválido",
            "esperado tipo : identificador",//"<variavel> inválido",
            "esperado = += -=",//"<operadorAtribuicao> inválido",
            "esperado elemento and or",//"<expressao> inválido",
            "esperado expressao, expressao",//"<listaExpressoes> inválido",
            "esperado ifFalseDo ",//"<selecaoOpcional> inválido",
            "esperado whileTrueDo whileFalseDo",//"<tipoCondicao> inválido",
            "esperado ,",//"<listaIdentificadores1> inválido",
            "esperado ;",//"<parametrosFormais1> inválido",
            "esperado comando .",//"<listaComandos1> inválido",
            "esperado , ",//"<listaExpressoes1> inválido",
            "esperado relacional true false not",//"<> inválido",
            "esperado aritmética operadorelacional",//"<relacional> inválido",
            "esperado termo + -",//"<aritmática> inválido",
            "esperado == != < <= > >=",//"<operadorRelacional> inválido",
            "esperado fator * / ",//"<termo> inválido",
            "esperado identificador, constante inteira, constante real, constante caractere, constante string",//"<fator> inválido",
            "esperado and or",//"<expressao1> inválido",
            "esperado + - ",//"<aritmetica1> inválido",
            "esperado * /",//"<termo1> inválido",
            "esperado ( ",//"<fator1> inválido",
            "esperado lista de expressoes",//"<fator2> inválido",
            "esperado operador relacional aritmética"//"<relacional1> inválido"
        };
    }
}
